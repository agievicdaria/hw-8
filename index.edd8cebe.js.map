{"mappings":"AAIO,MAAMA,EAAO,CAACC,EAAKC,KACtB,IACI,MAAMC,EAAOC,KAAKC,UAAUH,GAC5BI,aAAaC,QAAQN,EAAKE,E,CAC5B,MAAMK,GACJC,QAAQC,IAAI,kBAAmBF,EAAMG,Q,GAQhCC,EAAQX,IACjB,IACI,MAAME,EAAOG,aAAaO,QAAQZ,GAClC,OAAgB,OAATE,OAAgBW,EAAYV,KAAKW,MAAMZ,E,CAChD,MAAMK,GACJC,QAAQC,IAAI,gBAAiBF,EAAMG,Q,GClBrCK,EAAUC,SAASC,eAAe,WAClCC,EAAOF,SAASC,eAAe;;AAGlC,IAACE,EAAY;;;AA2CiB,SAAxBC,EAASC,EAAMC,GAAS,EAAOC,EAAKJ,GACzC,MAAMK,EAAOR,SAASS,cAAc,MACpCD,EAAKE,YAAcL,EACnBG,EAAKG,QAAQJ,GAAKA,EACfD,IACCE,EAAKI,UAAY,WAErBV,EAAKW,YAAYL,GA1CR,SAAWM,GACpB,MAAMC,EAAOf,SAASS,cAAc,QAC9BO,EAAMhB,SAASiB,eAAe,KACpCF,EAAKG,UAAY,QACjBH,EAAKF,YAAYG,GACjBF,EAAOD,YAAYE,E;uEAsCnBI;CAAeX,E;;;AA+BT,SAADY,EAAcf,EAAMC,GACzB,MAAO,C,KACHD,E,OACAC,EACAC,GAAIJ,E;+DC5FZ;MAAMkB,EAASrB,SAASC,eAAe,UACjCqB,EAAOtB,SAASC,eAAe,QAErCoB,EAAOE,iBAAiB,SDyBP,WACb,MAAMC,EAAOzB,EAAQd,MAAMwC,OAC3BjC,QAAQC,IAAI+B,GACZzB,EAAQd,MAAQ,GAEJ,KAATuC,GAIHpB,EAASoB,GAqED,SAAcnB,EAAMC,GAAS,GACrC,MAAMoB,EAAe/B,EA3GL,SA6GhB,QAAoBE,IAAjB6B,EAA4B,CAEgB,MAArCC,EAAM,CAACP,EAAcf,EAAMC,IACjCvB,EAhHY,QAgHM4C,E,MAGwBD,EAA7BE,KAAKR,EAAcf,EAAMC,IACtCvB,EApHY,QAoHM2C,GAEtBvB,GAAa,C;oDA/Eb0B;CAAiBL,IALbM,MAAM,iB,IC9BdR,EAAKC,iBAAiB,SDkEmB,UAAbT,OAACA,IACzB,MAAMY,EAAe/B,EAvEL,SAwEhB,GAAuB,OAApBmB,EAAOiB,SAAmB,CACzBjB,EAAOF,UAAUoB,OAAO,WACxB,MAAMC,EAAYP,EAAaQ,WAAUV,GAAQW,OAAOX,EAAKjB,MAAQ4B,OAAOrB,EAAOH,QAAQJ,MAC3FmB,EAAaO,GAAW3B,QAAUoB,EAAaO,GAAW3B,M,MACvD,GAAGQ,EAAOF,UAAUwB,SAAS,SAAU,CAC1CtB,EAAOuB,WAAWC,SAClB,MAAML,EAAYP,EAAaQ,WAAUV,GAAQW,OAAOX,EAAKjB,MAAQ4B,OAAOrB,EAAOuB,WAAW1B,QAAQJ,MACtGmB,EAAaa,OAAON,EAAW,E,CAEnClD,EAjFgB,QAiFE2C,E;;AC1EtBc,OAAOjB,iBAAiB,oBDwHxB,WACI,MAAMG,EAAe/B,EAhIL,cAkIIE,IAAjB6B,GACHA,EAAae,SAAQ,EAACpC,KAACA,EAAIC,OAAEA,EAAMC,GAAEA,MAASH,EAASC,EAAMC,EAAQC,GACrEJ,EAAYI,EAAK,CAAC,G","sources":["src/scripts/storage.js","src/scripts/functions.js","src/scripts/main.js"],"sourcesContent":["//! функція, що зберігає дані в locale storage\n// 1. у функцію передаємо ключ і значення\n// 2. привести до JSON\n// 3. використовувати try ... catch\nexport const save = (key, value) => {\n    try {\n        const data = JSON.stringify(value);\n        localStorage.setItem(key, data)\n    } catch(error) {\n        console.log('Stringify error', error.message);\n    }\n}\n\n//! функція, що отримує дані з locale storage\n// 1. у функцію передаємо ключ\n// 2. перевіряємо, чи приходить null, чи дані; якщо дані - парсимо їх; якщо null - перетворюємо його на undefined\n// 3. використовувати try ... catch\nexport const load = (key) => {\n    try {\n        const data = localStorage.getItem(key);\n        return data === null ? undefined : JSON.parse(data);\n    } catch(error) {\n        console.log('Parse error!!', error.message);\n    }\n} ","import {save, load} from './storage.js';\n\nconst STORAGE_KEY = 'tasks';\n\nconst myInput = document.getElementById('myInput');\nconst myUL = document.getElementById('myUL');\n\n//! id для task\nlet currentId = 0;\n\n//! додаємо хрестик на li\n// 1. у функцію використовуємо target\n// 2. створюємо текстовий вузол\n// 3. додаємо клас\n// 4. додаємо текст на спан\n// 5. додаємо спан на li\nfunction addCloseButton(target) {\n    const span = document.createElement(\"span\");\n    const txt = document.createTextNode(\"\\u00D7\");\n    span.className = \"close\";\n    span.appendChild(txt);\n    target.appendChild(span);\n}\n\n//! створюємо li; додаємо його в інтерфейс (ВФ) і в locale storage (ВФ)\n// 1. використовувати trim\n// 2. очищуємо input перед введенням\n// 3. якщо користувач хоче додати пустий task, виводимо alert\n//* 4. викликаємо функцію createLi, що створює li в ul і додає в інтерфейс\n//* 5. викликаємо функцію addTaskToStorage\nfunction addNewTask() {\n    const task = myInput.value.trim();\n    console.log(task);\n    myInput.value = '';\n\n    if(task === \"\") {\n        alert('Введіть текст!');\n        return\n    }\n    createLi(task);\n\n    addTaskToStorage(task);\n}\n\n//! створюємо li і додаємо в ul і в інтерфейс\n// 1. у функцію передаємо текст, статус, id\n// 2. статус по замовченням false, а id - currentId\n// 3. беремо посилання на li, додаємо на нього текст і id\n// 4. якщо task виконаний, то додаємо клас \"checked\"\n// 5. додаємо li в ul\n// 6. викликаємо функцію addCloseButton (що додає хрестик на li)\nfunction createLi(text, isDone = false, id = currentId) {\n    const liEl = document.createElement('li');\n    liEl.textContent = text;\n    liEl.dataset.id = id;\n    if(isDone) {\n        liEl.classList = 'checked';\n    }\n    myUL.appendChild(liEl);\n    addCloseButton(liEl)\n}\n\n//! змінюємо статус а). при зміні task виконано/не виконано; б). при видаленні за допомогою хрестика\n// 1. у функції використовуємо target\n//* 2. створюємо константу для виклику функції load(яка отримує дані з locale storage)\n// 3.1 якщо натискаємо на li, то додаємо або видаляємо клас \"checked\"\n// 3.2. знаходимо індекс того task, на який ми натиснули (використовувати dataset)\n// 3.3. змінюємо статус на протилежний у цього task\n// 4.1 якщо натиснули на хрестик (перевіряти умову через клас хрестика), видаляємо task\n// 4.2 знаходимо індекс li, на хрестик якого ми натисули (використовувати parentNode і dataset)\n// 4.3 видаляємо task з locale storage через константу, що створили в п. 2\n//* 5. виклакаємо функцію save, куди передаємо константу з п. 2\nfunction handleTaskBehavior({target}) {\n    const currentState = load(STORAGE_KEY);\n    if(target.nodeName === 'LI') {\n        target.classList.toggle('checked');\n        const taskIndex = currentState.findIndex(task => Number(task.id) === Number(target.dataset.id));\n        currentState[taskIndex].isDone = !currentState[taskIndex].isDone;\n    } else if(target.classList.contains('close')) {\n        target.parentNode.remove();\n        const taskIndex = currentState.findIndex(task => Number(task.id) === Number(target.parentNode.dataset.id));\n        currentState.splice(taskIndex, 1)\n    }\n    save(STORAGE_KEY, currentState)\n}\n\n//! створюємо об'єкт, що будемо додавати в locale storage\n// 1. у функцію передаємо текст і статус\n// 2. повертаємо текст, статус і id\n// 3. в id передаємо currentId\nfunction createTaskObj(text, isDone) {\n    return {\n        text,\n        isDone, \n        id: currentId,\n    }\n}\n\n//! додаємо масив в local storage або створюємо і додаємо новий\n// 1. у функцію передаємо текст і статус\n// 2. статус по замовченню false\n//* 3. створюємо константу виклику функції load (яка отримує дані з locale storage)\n// 4.1. якщо масив в locale storage пустий, то створюємо масив і додаємо туди перший об'єкт задачі\n//* 4.2 викликаємо функцію save і передаємо туди новостворений масив\n//* 5.1 якщо масив уже є, то додаємо туди результат виклику функції createTaskObj (яка створює об'єкт, \n// що будемо додавати в locale storage), з аргументами текст і статус\n//* 5.2 викликаємо функцію save і передаємо туди константу з п. 3\n// 6. збільшуємо currentId на 1\nfunction addTaskToStorage(text, isDone = false) {\n    const currentState = load(STORAGE_KEY);\n\n    if(currentState === undefined) {\n        // створюємо масив і додаємо туди перший об'єкт задачі\n        const arr = [createTaskObj(text, isDone)];\n        save(STORAGE_KEY, arr);\n    } else {\n        // до вже існуючого масиву додати новий об'єкт задачі\n        currentState.push(createTaskObj(text, isDone));\n        save(STORAGE_KEY, currentState);\n    }\n    currentId += 1; \n}\n\n//! заповнюємо інтерфейс після завантаження сторінки\n//* 1. створюємо константу для виклику функції load\n// 2. якщо в locale storage є непустий масив, то перебираємо цей масив і викликаємо функцію createLi, що створює li і додає в ul і в інтерфейс\n// 2(пояснення). 1). перевіряємо на те, що константа з п. 1 не дорівнює undefined\n//               2). перебираємо методом forEach, куди пеедаємо текст, статус і id і отримуємо результат виклику функції createLi, куди передаємо текст, статус і id\n// 3. currentId являє собою id збільшений на 1\nfunction fillTasksList() {\n    const currentState = load(STORAGE_KEY);\n\n    if(currentState !== undefined) {\n    currentState.forEach(({text, isDone, id}) => {createLi(text, isDone, id);\n    currentId = id + 1;\n    })\n}\n}\n\nexport {addNewTask, handleTaskBehavior, fillTasksList}","import {addNewTask, handleTaskBehavior, fillTasksList} from './functions.js';\n\nconst addBtn = document.getElementById('addBtn');\nconst myUL = document.getElementById('myUL');\n\naddBtn.addEventListener('click', addNewTask);\nmyUL.addEventListener('click', handleTaskBehavior );\n \n//! додаємо подію під час завантаження сторінки і завантаження DOM\nwindow.addEventListener('DOMContentLoaded', fillTasksList);"],"names":["$07f0cd7b2a391dc0$export$a1544dad697b423d","key","value","data","JSON","stringify","localStorage","setItem","error","console","log","message","$07f0cd7b2a391dc0$export$11e63f7b0f3d9900","getItem","undefined","parse","$97b27afd8a9ee943$var$myInput","document","getElementById","$97b27afd8a9ee943$var$myUL","$97b27afd8a9ee943$var$currentId","$97b27afd8a9ee943$var$createLi","text","isDone","id","liEl","createElement","textContent","dataset","classList","appendChild","target","span","txt","createTextNode","className","$97b27afd8a9ee943$var$addCloseButton","$97b27afd8a9ee943$var$createTaskObj","$ac43a74d429af77f$var$addBtn","$ac43a74d429af77f$var$myUL","addEventListener","task","trim","currentState","arr","push","$97b27afd8a9ee943$var$addTaskToStorage","alert","nodeName","toggle","taskIndex","findIndex","Number","contains","parentNode","remove","splice","window","forEach"],"version":3,"file":"index.edd8cebe.js.map"}